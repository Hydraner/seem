<?php

/**
 * @file
 * Contains hook implementations and functions for the seem module.
 */

use Drupal\Component\Serialization\Json;
use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;

/**
 * Implements hook_entity_view_alter().
 *
 * Wraps any entity with the seem render element to make it displayable.
 */
function seem_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  $main_content = $build;
  $build = array(
    '#' . $entity->getEntityTypeId() => $entity,
    '#entity_type' => $entity->getEntityTypeId(),
    '#view_mode' => $display->getMode(),
    'content' => array(
      '#type' => 'seem',
      '#displayable' => 'entity',
      '#main_content' => $main_content,
      '#entity_type' => $entity->getEntityTypeId(),
      '#bundle' => $display->getTargetBundle(),
      '#view_mode' => $display->getMode(),
    ),
  );
}

/**
 * Implements hook_form_alter().
 *
 * Add a post_render callback to any form, in order to wrap the rendered form
 * with a layout.
 */
function seem_form_alter(&$form, $form_state) {
  $form['#post_render'][] = 'seem_post_render';
}

/**
 * Implementation of seem_post_render().
 *
 * Wrap the rendered form with the seem render element to make it displayable.
 *
 * @param string $markup
 *   The markup passed by post_render. We use it as main_content.
 * @param array $element
 *   The original render array to extract some context.
 *
 * @return string
 *   Returns the rendered layout / new markup.
 */
function seem_post_render($markup, array $element) {
  $output = array(
    '#type' => 'seem',
    '#displayable' => 'form',
    '#form_id' => $element['#form_id'],
    '#main_content' => array('#markup' => $markup),
  );
  // @todo: Find a better solution for that.
  return \Drupal::service('renderer')->render($output, FALSE);
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Since template_preprocess_view removes the views title by default, we add
 * a possibility to show it anyways based on the `show_titleÂ´ parameter.
 */
function seem_preprocess_views_view(&$variables) {
  $view = $variables['view'];

  // Render title if requested.
  if (isset($view->element['#show_title'])) {
    $variables['title']['#markup'] = $view->getTitle();
  }
}

/**
 * Implements hook_toolbar().
 */
function seem_toolbar() {
  $items = [];
//  $items['contextual'] = [
//    '#cache' => [
//      'contexts' => [
//        'user.permissions',
//      ],
//    ],
//  ];
//
//  if (!\Drupal::currentUser()->hasPermission('access contextual links')) {
//    return $items;
//  }

  $items['seem'] = array(
    '#type' => 'toolbar_item',
    'tab' => array(
      '#type' => 'html_tag',
      '#tag' => 'button',
      '#value' => t('Seem config'),
      '#attributes' => array(
        'class' => array('toolbar-icon', 'toolbar-icon-seem'),
        'role' => 'button',
        'aria-pressed' => 'false',
      ),
    ),
    '#wrapper_attributes' => array(
      'class' => array('hidden', 'seem-toolbar-tab'),
    ),
    '#attached' => array(
      'library' => array(
        'seem/drupal.seem-toolbar',
      ),
    ),
  );

  return $items;
}

/**
 * Implements hook_block_build_HOOK_alter().
 *
 * Set an empty #contextual_links key for the system_main_block in order to
 * prevent it from producing an error when trying to merge our #contextual_links
 * with an empty array.
 *
 * {@inheritdoc}
 */
function seem_block_build_system_main_block_alter(array &$build, BlockPluginInterface $block) {
  $build['#contextual_links'] = [];
}

/**
 * Implements hook_contextual_links_view_alter().
 *
 * {@inheritdoc}
 */
function seem_contextual_links_view_alter(&$element, $items) {
  if (isset($items['seem.display_config'])) {
    $link = &$element['#links']['seemdisplay-config'];
    // Make the link use a modal.
    $link['attributes']['class'][] = 'use-ajax';
    $link['attributes']['data-dialog-type'] = 'modal';
    $link['attributes']['data-dialog-options'] = Json::encode([
      'width' => 700,
      'parameters' => $items['seem.display_config']['metadata']['parameters'],
      'context' => $items['seem.display_config']['metadata']['context'],
      'plugin_id' => $items['seem.display_config']['metadata']['plugin_id'],
    ]);
    // Rebuild the link.
    $route_name = $items['seem.display_config']['metadata']['route'];
    $route_parameters = $items['seem.display_config']['route_parameters'];
    $element['#links']['seemdisplay-config']['url'] = Url::fromRoute($route_name, $route_parameters, []);
  }
}

